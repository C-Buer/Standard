(* ----------------- Lexical Level ----------------- *)
Identifier    = ( "_" | Letter ), { "_" | Letter | Digit } ;
Number        = DecNumber | HexNumber | OctNumber | BinNumber ;
String        = "\"" , { UnicodeChar } , "\"" ;
Char          = "'" , ASCIIChar , "'" ;

DecNumber     = ( "1" | "2" | … | "9" ), { "0" | … | "9" } ;
HexNumber     = "0" , ( "x" | "X" ), { HexDigit } ;
OctNumber     = "0" , { "0" | … | "7" } ;
BinNumber     = "0" , ( "b" | "B" ), { "0" | "1" } ;

Letter        = CharacterUpper | CharacterLower ;
CharacterUpper= "A" | … | "Z" ;
CharacterLower= "a" | … | "z" ;
Digit         = "0" | … | "9" ;
HexDigit      = Digit | "A" | … | "F" | "a" | … | "f" ;

(* ----------------- Top-level Program ----------------- *)
Program       = { Declaration } ;

Declaration   = ClassDecl
              | InterfaceDecl
              | FunctionDecl
              | VarDecl
              ;

(* ----------------- Class and Interface ----------------- *)
ClassDecl     = "class", Identifier, "{",
                    { FieldDecl | MethodDecl },
                "}" ;

InterfaceDecl = "interface", Identifier,
                    [ "extends", IdentifierList ],
                "{",
                    { MethodSig },
                "}" ;

IdentifierList= Identifier, { ",", Identifier } ;

(* ----------------- Fields, Methods, Functions, Variables ----------------- *)
FieldDecl     = Type, Identifier, [ "=", Expression ], ";" ;

MethodDecl    = Type, Identifier,
                    "(", [ ParameterList ], ")",
                    Block ;

MethodSig     = Type, Identifier,
                    "(", [ ParameterList ], ")",
                ";" ;

FunctionDecl  = Type, Identifier,
                    "(", [ ParameterList ], ")",
                    Block ;

VarDecl       = Type, Identifier, [ "=", Expression ], ";" ;

ParameterList = Parameter, { ",", Parameter } ;
Parameter     = Type, Identifier ;

(* ----------------- Statement ----------------- *)
Statement     = Block
              | IfStmt
              | WhileStmt
              | ReturnStmt
              | VarDecl
              | ExprStmt
              ;

Block         = "{", { Statement }, "}" ;

IfStmt        = "if", "(", Expression, ")", Statement,
                     [ "else", Statement ] ;

WhileStmt     = "while", "(", Expression, ")", Statement ;

ReturnStmt    = "return", [ Expression ], ";" ;

ExprStmt      = Expression, ";" ;

(* ----------------- Expression ----------------- *)
Expression        = Assignment ;

Assignment        = LogicOr, { "=", Assignment } ;

LogicOr           = LogicAnd, { "||", LogicAnd } ;
LogicAnd          = Equality, { "&&", Equality } ;

Equality          = Relational, { ( "==" | "!=" ), Relational } ;
Relational        = Additive, { ( "<" | ">" | "<=" | ">=" ), Additive } ;

Additive          = Multiplicative, { ( "+" | "-" ), Multiplicative } ;
Multiplicative    = Unary, { ( "*" | "/" | "%" ), Unary } ;

Unary             = ( "-" | "!" ), Unary
                  | Primary
                  ;

Primary           = Identifier
                  | Number
                  | String
                  | "(", Expression, ")"
                  | Lambda
                  ;

(* ----------------- Lambda ----------------- *)
Lambda = "function",
                        "(", Type, ")",
                        "(", [ ParameterList ], ")",
                        Block ;

(* ----------------- Type Definition ----------------- *)
Type              = CompositeType ;

CompositeType     = RestricPtrType
                  | ArrayType
                  | FunctionType
                  ;

RestricPtrType    = PtrType
                  | AdvanceType
                  | ArrayType
                  | FunctionType
                  ;

ArrayType         = AdvanceType
                  | FunctionType
                  | "(", CompositeType, ")",
                    "[", Number, "]",
                    { "[", Number, "]" }
                  ;

FunctionType      = "function", "(", CompositeType, ")",
                    "(", [ CompositeType, { ",", CompositeType } ], ")"
                  ;

AdvanceType       = BasicType
                  | BasicStringType
                  | UserType
                  ;

UserType          = Identifier ;

BasicStringType   = "string" ;

BasicType         = BasicBaseType
                  | BasicExtType
                  ;

BasicExtType      = IntExtType
                  | ChatExtType
                  ;

ChatExtType       = "char8" | "char16" | "char32" ;

IntExtType        = "int8" | "int16" | "int32" | "int64" ;

BasicBaseType     = PtrType | IntType | ChatType ;

PtrType           = "ptr" ;
ChatType          = "char" ;
IntType           = "int" ;

(* ----------------- Value Literal ----------------- *)
PtrValue          = HexNumber ;
StringValue       = String | Char ;
CharValue         = Number | Char ;
IntValue          = Number ;

RightBrace        = "}" ;
LeftBrace         = "{" ;
RightBracket      = "]" ;
LeftBracket       = "[" ;
RightParen        = ")" ;
LeftParen         = "(" ;
Dot               = "." ;
Comma             = "," ;
Colon             = ":" ;
Semicolon         = ";" ;
